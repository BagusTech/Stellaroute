{"version":3,"sources":["components/accordion/accordion.js"],"names":["$","removeHash","scrollV","scrollH","location","document","title","loc","pathname","search","history","pushState","body","scrollLeft","scrollTop","$goToVal","findInvalidAttributeCharacters","findMultipleSpaces","createValidAttributeFromTitle","findAllSpaces","trim","replace","checkOrSetTabId","$tabs","each","i","element","$element","attr","tabTitle","text","originalTabId","tabId","index","length","substring","toggleTab","$tabToToggle","animationSpeed","tabState","$tabpanel","next","slideToggle","trigger","e","stopPropagation","isOnLoad","$tab","currentTarget","find","currentTabIsActiveTab","currentId","$activeTab","alwaysShowOne","data","allowMultiple","window","hash","preventDefault","$wrapper","wrapper","pageAnchor","parseInt","defaultAnimationSpeed","removeClass","css","display","off","changeTab","on","initTabChange","$anchorTab","filter","click","_tab","prop","eq","this","fn","makeAccordion","makeTabPanel","jQuery","noConflict"],"mappings":"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","file":"accordion.min.js","sourcesContent":["/* global jQuery */\r\nvoid function initializeAccordions($) {\r\n    'use strict';\r\n\r\n    function removeHash() { \r\n        let scrollV, scrollH;\r\n        const loc = window.location;\r\n        if (\"pushState\" in history) {\r\n            history.pushState(\"\", document.title, loc.pathname + loc.search);\r\n        } else {\r\n            // Prevent scrolling by storing the page's current scroll offset\r\n            scrollV = document.body.scrollTop;\r\n            scrollH = document.body.scrollLeft;\r\n\r\n            loc.hash = \"\";\r\n\r\n            // Restore the scroll offset, should be flicker free\r\n            document.body.scrollTop = scrollV;\r\n            document.body.scrollLeft = scrollH;\r\n        }\r\n    }\r\n\r\n    // on click of any link that starts with a hash, if it is a tab, then change that tab\r\n    $('a[href^=\"#\"]').on('click', function clickAnchor(e) {\r\n        const $goToVal = $($(this).attr('href'));\r\n\r\n        if (!$goToVal.is('[role=tab]')) {\r\n            return;\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        $goToVal.trigger('tab-change');\r\n    });\r\n\r\n    function createValidAttributeFromTitle(title) {\r\n        const findInvalidAttributeCharacters = /[^a-z0-9\\s]|^[^a-z\\s]+/gi;\r\n        const findMultipleSpaces = /\\s\\s+/g;\r\n        const findAllSpaces = /\\s/g;\r\n\r\n        return title.replace(findInvalidAttributeCharacters, '')\r\n                    .replace(findMultipleSpaces, ' ')\r\n                    .trim()\r\n                    .replace(findAllSpaces, '-');\r\n    }\r\n\r\n    function checkOrSetTabId($tabs) {\r\n        $tabs.each((i, element) => {\r\n            const $element = $(element);\r\n\r\n            if ($element.attr('id')) {\r\n                return;\r\n            }\r\n\r\n            const tabTitle = $element.text() || 'Empty';\r\n            const originalTabId = createValidAttributeFromTitle(tabTitle);\r\n            let tabId = `#${originalTabId}`;\r\n            let index = 0;\r\n\r\n            while ($(tabId).length) {\r\n                tabId = `#${originalTabId}${++index}`;\r\n            }\r\n\r\n            $element.attr('id', tabId.substring(1));\r\n        });\r\n    }\r\n\r\n    function toggleTab($tabToToggle, animationSpeed) {\r\n        const tabState = $tabToToggle.attr('aria-expanded') === 'true';\r\n        const $tabpanel = $tabToToggle.next('[role=\"tabpanel\"]'); // find the tabpanel that it is associated with\r\n\r\n        $tabToToggle.attr('aria-expanded', !tabState);\r\n\r\n\r\n        // if there is a tab panel hade/show it\r\n        if($tabpanel.length) {\r\n            $tabpanel.attr('aria-hidden', tabState).slideToggle(animationSpeed, () => {\r\n                $tabToToggle.closest('[data-function*=\"scroll\"]').trigger('initScroll')\r\n                $tabToToggle.trigger('tab-changed', [ true ]);\r\n            });\r\n        } else {\r\n            $tabToToggle.trigger('tab-changed', [ true ]);\r\n        }\r\n    }\r\n\r\n    function changeTab(e, isOnLoad) {\r\n        e.stopPropagation();\r\n        const $activeTab = e.data.wrapper.find('> [aria-expanded=\"true\"]');\r\n        const $tab = $(e.currentTarget);\r\n        const currentTabIsActiveTab = ($tab[0] === $activeTab[0]);\r\n        const currentId = $tab.attr('id');\r\n        const alwaysShowOne = e.data.alwaysShowOne;\r\n        const animationSpeed = e.data.animationSpeed;\r\n\r\n        // if trying to toggle the current tab and one must always be shown, do nothing\r\n        if (alwaysShowOne && currentTabIsActiveTab){\r\n            $tab.trigger('tab-changed', [ false ]); // trigger tab-changed event, but pass false because nothing changed\r\n            return; // return to stop anything else from happeneing\r\n        } \r\n\r\n        // close other active tab \r\n        if (!currentTabIsActiveTab && $activeTab.length > 0 && !e.data.allowMultiple){\r\n            toggleTab($activeTab, animationSpeed);\r\n        }\r\n\r\n        toggleTab($tab, animationSpeed);\r\n        // set hash but don't move the page\r\n        if (!isOnLoad) {\r\n            if(!alwaysShowOne && currentTabIsActiveTab){\r\n                removeHash();\r\n            } else {\r\n                $tab.attr('id', '');\r\n                window.location.hash = currentId;\r\n                $tab.attr('id', currentId);\r\n            }\r\n        }\r\n    }\r\n\r\n    function initTabChange(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        $(e.currentTarget).trigger('tab-change');\r\n    }\r\n\r\n    function makeTabPanel(wrapper) {\r\n        const $wrapper = $(wrapper);\r\n        const $tabs = $wrapper.children('[role=\"tab\"]');\r\n        const pageAnchor = window.location.hash;\r\n\r\n        const defaultAnimationSpeed = 270;\r\n        const animationSpeed = parseInt($wrapper.attr('data-animation-speed'), 10) || defaultAnimationSpeed;\r\n\r\n        const alwaysShowOne = $wrapper.attr('data-always-show-one');\r\n        const allowMultiple = $wrapper.attr('data-allow-multiple');\r\n\r\n        checkOrSetTabId($tabs);\r\n\r\n        $wrapper.removeClass('no-js');\r\n\r\n        // make sure what is supposed to be shown is, and what isn't, isn't\r\n        $wrapper.find('[role=\"tabpanel\"][aria-hidden=\"false\"]').css({'display': 'block' });\r\n        $wrapper.find('[role=\"tabpanel\"][aria-hidden=\"true\"]').css({'display': 'none' });\r\n\r\n        $tabs.off('tab-change', changeTab).on('tab-change', {wrapper: $wrapper, alwaysShowOne, allowMultiple, animationSpeed}, changeTab);\r\n\r\n        // on click of tab, trigger the tab change\r\n        $tabs.off('click', initTabChange).on('click', initTabChange);\r\n\r\n        // if there isn't a page anchor, end here\r\n        if (!pageAnchor && !alwaysShowOne) {\r\n            $wrapper.trigger('accordin-initialized');\r\n            return;\r\n        }\r\n\r\n        // get the tab that is being linked to in top\r\n        const $anchorTab = $tabs.filter(pageAnchor);\r\n\r\n        //only trigger tab change if the tab we are going to isn't currently open\r\n        if($anchorTab.attr('aria-expanded') === 'false'){\r\n            $(window).on('load', () => {\r\n                $anchorTab.click();\r\n            });\r\n        } else if (alwaysShowOne && !$tabs.filter((i, _tab) => $(_tab).prop('aria-expanded')).length) {\r\n            $tabs.eq(0).trigger('tab-change', [true])\r\n        }\r\n\r\n        $wrapper.trigger('accordin-initialized');\r\n    }\r\n\r\n    $.fn.makeAccordion = function makeAccordion() {\r\n        return this.each((index, wrapper) => {\r\n            makeTabPanel(wrapper);\r\n        });\r\n    };\r\n\r\n    // initialize default accordions and tabs\r\n    $(() => {\r\n        $('[data-function*=\"accordion\"]').makeAccordion();\r\n    });\r\n}(jQuery.noConflict());"]}