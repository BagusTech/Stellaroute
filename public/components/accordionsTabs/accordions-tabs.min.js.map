{"version":3,"sources":["components/accordionsTabs/accordions-tabs.js"],"names":["$","$goToVal","title","findInvalidAttributeCharacters","findMultipleSpaces","createValidAttributeFromTitle","findAllSpaces","trim","replace","checkOrSetTabId","$tabs","each","i","element","$element","attr","tabTitle","text","originalTabId","tabId","index","length","substring","toggleTab","tabToToggle","animate","animationSpeed","snapTopTo","topOffset","$tabToToggle","tabState","next","intervalSpeed","currentIteration","animateScroll","wrapperScroll","offset","scrollTop","clearInterval","top","scrollTo","makeTabPanel","wrapper","isTabs","$wrapper","pageAnchor","window","location","hash","defaultBreakpoint","breakpoint","parseInt","defaultAnimationSpeed","alwaysShowOne","allowMultiple","snapToTop","topOffsetDefault","find","css","display","initialPanelHeight","height","changeTab","on","$activeTab","e","isOnLoad","stopPropagation","currentId","currentTabIsActiveTab","$tab","trigger","panelHeight","click","preventDefault","$anchorTab","filter","makeAccordion","this","fn","makeTabs","jQuery"],"mappings":"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","file":"accordions-tabs.min.js","sourcesContent":["/*global jQuery */\r\nvoid function initializeAccordionsTabs($) {\r\n    'use strict';\r\n\r\n    // on click of any link that starts with a hash, if it is a tab, then change that tab\r\n    $('a[href^=\"#\"]').on('click', function clickAnchor(e) {\r\n        const $goToVal = $($(this).attr('href'));\r\n\r\n        if (!$goToVal.is('[role=tab]')) {\r\n            return;\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        $goToVal.trigger('tab-change');\r\n    });\r\n\r\n    function createValidAttributeFromTitle(title) {\r\n        const findInvalidAttributeCharacters = /[^a-z0-9\\s]|^[^a-z\\s]+/gi;\r\n        const findMultipleSpaces = /\\s\\s+/g;\r\n        const findAllSpaces = /\\s/g;\r\n\r\n        return title.replace(findInvalidAttributeCharacters, '')\r\n                    .replace(findMultipleSpaces, ' ')\r\n                    .trim()\r\n                    .replace(findAllSpaces, '-');\r\n    }\r\n\r\n    function checkOrSetTabId($tabs) {\r\n        $tabs.each((i, element) => {\r\n            const $element = $(element);\r\n\r\n            if ($element.attr('id')) {\r\n                return;\r\n            }\r\n\r\n            const tabTitle = $element.text();\r\n            const originalTabId = createValidAttributeFromTitle(tabTitle);\r\n            let tabId = `#${originalTabId}`;\r\n            let index = 0;\r\n\r\n            while ($(tabId).length) {\r\n                tabId = `#${originalTabId}${++index}`;\r\n            }\r\n\r\n            $element.attr('id', tabId.substring(1));\r\n        });\r\n    }\r\n\r\n    function toggleTab(tabToToggle, animate, animationSpeed, snapTopTo, topOffset) {\r\n        const $tabToToggle = $(tabToToggle);\r\n        const tabState = $tabToToggle.attr('aria-expanded') === 'true';\r\n\r\n        $tabToToggle.attr('aria-expanded', !tabState)\r\n            .next('[role=\"tabpanel\"]') // find the tabpanel that it is associated with\r\n            .attr('aria-hidden', tabState)\r\n            .slideToggle(animate ? animationSpeed : 0);\r\n\r\n        if (snapTopTo && animate){\r\n            const intervalSpeed = 30;\r\n            let currentIteration = 0;\r\n\r\n            const animateScroll = setInterval(() => {\r\n                if (currentIteration > ((animationSpeed/ intervalSpeed) + 1)){\r\n                    const wrapperScroll = snapTopTo === 'body' ? 0 : $(snapTopTo).scrollTop();\r\n                    const scrollTo = wrapperScroll + $tabToToggle.offset().top - topOffset;\r\n                    clearInterval(animateScroll);\r\n                    $(snapTopTo).animate({ scrollTop: `${scrollTo}px` });\r\n                }\r\n\r\n                currentIteration++;\r\n            }, intervalSpeed);\r\n        }\r\n    }\r\n\r\n    function makeTabPanel(wrapper, isTabs) {\r\n        const $wrapper = $(wrapper);\r\n        const $tabs = $('[role=\"tab\"]', $wrapper);\r\n        const pageAnchor = window.location.hash;\r\n\r\n        const defaultBreakpoint = 1170;\r\n        const breakpoint = parseInt($wrapper.attr('data-breakpoint'), 10) || defaultBreakpoint;\r\n\r\n        const defaultAnimationSpeed = 750;\r\n        const animationSpeed = parseInt($wrapper.attr('data-animation-speed'), 10) || defaultAnimationSpeed;\r\n\r\n        const alwaysShowOne = isTabs || $wrapper.attr('data-always-show-one') === 'true' ? true : false;\r\n\r\n        const allowMultiple = $wrapper.attr('data-allow-multiple') === 'true' ? true : false;\r\n        const snapToTop = $wrapper.attr('data-snap-to-top') === 'true' ? true : false;\r\n        const snapTopTo = snapToTop\r\n            ? ($wrapper.attr('data-snap-top-to')\r\n                ? $wrapper.attr('data-snap-top-to') : 'body')\r\n            : false;\r\n        const topOffsetDefault = 30;\r\n        const topOffset = $wrapper.attr('data-top-offset') ? $wrapper.attr('data-top-offset') : topOffsetDefault;\r\n\r\n        checkOrSetTabId($tabs);\r\n\r\n        $wrapper.removeClass('no-js');\r\n\r\n        $wrapper.find('> [aria-hidden=\"false\"]').css({'display': 'block' });\r\n        $wrapper.find('> [aria-hidden=\"true\"]').css({'display': 'none' });\r\n\r\n        if (isTabs){\r\n            const initialPanelHeight = $wrapper.find('[aria-hidden=\"false\"]').height();\r\n\r\n            $wrapper.css('margin-bottom', `${initialPanelHeight}px`);\r\n        }\r\n\r\n        $tabs.on('tab-change', function changeTab(e, isOnLoad) {\r\n            e.stopPropagation();\r\n\r\n            const $activeTab = $wrapper.find('> [aria-expanded=\"true\"]');\r\n            const $tab = $(this);\r\n            const currentTabIsActiveTab = ($tab[0] === $activeTab[0]);\r\n            const animate = !(isTabs && $(window).innerWidth() > breakpoint);\r\n            const currentId = $tab.attr('id');\r\n\r\n            if (alwaysShowOne && currentTabIsActiveTab){\r\n                // trigger tab-changed event, but pass false because nothing changed\r\n                $tab.trigger('tab-changed', [ false ]);\r\n\r\n                return;\r\n            } else if (!currentTabIsActiveTab && $activeTab.length > 0 && !allowMultiple){\r\n                toggleTab($activeTab, animate, animationSpeed);\r\n            }\r\n\r\n            toggleTab($tab, animate, animationSpeed, snapTopTo, topOffset);\r\n\r\n            if (!animate){\r\n                const panelHeight = $tab.next('[role=\"tabpanel\"]').height();\r\n\r\n                $wrapper.css('margin-bottom', `${panelHeight}px`);\r\n            }\r\n\r\n            // set hash but don't move the page\r\n            if (!isOnLoad) {\r\n                $tab.attr('id', '');\r\n                window.location.hash = currentId;\r\n                $tab.attr('id', currentId);\r\n            }\r\n\r\n            // trigger tab-changed event when done\r\n            $tab.trigger('tab-changed', [ true ]);\r\n        });\r\n\r\n        $tabs.click(function clickTab(e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            $(this).trigger('tab-change');\r\n        });\r\n\r\n        if (!pageAnchor) {\r\n            return;\r\n        }\r\n\r\n        const $anchorTab = $tabs.filter(pageAnchor);\r\n        $anchorTab.trigger('tab-change', [ true ]);\r\n    }\r\n\r\n    $.fn.makeAccordion = function makeAccordion() {\r\n        return this.each((index, wrapper) => {\r\n            const $wrapper = $(wrapper);\r\n\r\n            makeTabPanel($wrapper);\r\n\r\n            $wrapper.trigger('accordion-initialized');\r\n        });\r\n    };\r\n\r\n    $.fn.makeTabs = function makeTabs() {\r\n        return this.each((index, wrapper) => {\r\n            const $wrapper = $(wrapper);\r\n\r\n            makeTabPanel($wrapper, true);\r\n\r\n            $wrapper.trigger('tabs-initialized');\r\n        });\r\n    };\r\n\r\n    jQuery(() => {\r\n        $('[data-function=\"accordion\"]').makeAccordion();\r\n        $('[data-function=\"tabs\"]').makeTabs();\r\n    });\r\n}(jQuery);\r\n"]}