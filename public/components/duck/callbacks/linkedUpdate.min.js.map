{"version":3,"sources":["components/duck/callbacks/linkedUpdate.js"],"names":["$","duck","getVal","$wrapper","$field","fieldType","initLinkedUpdate","vals","find","each","i","v","val","updateItems","Id","table","field","isArray","removeVals","items","window","location","reload","length","itemsToUpdate","item","current","indexOf","push","Array","_loop","filter","itm","index","removeFromValsLength","splice","_loop2","update","linkedUpdate","$this","field1","field2","$field1","oldVals","valsToFind","prop","attr","j","currentId","get","value","callbacks","jQuery","noConflict"],"mappings":"uOAEK,UAA0BA,EAAGC,GAGjC,QAASC,GAAOC,EAAUC,GAH3B,GAAKC,GAASC,EAAAA,KAAT,YAMH,QAAOD,GAHR,IAAA,QACC,IAAMA,WAAYD,GAAAA,GAAAA,WAKhB,GAAMG,KAUN,OAZDH,GAAKI,KAAL,gBAAAC,KAAA,SAAAC,EAAAC,GACA,GAAKC,GAAAZ,EAALW,GAAAC,KAAkBA,IACjBL,EAAMA,KAAAA,MAUNI,EAAOJ,KAfSH,IAAAA,YAAAA,mBAAAA,GAAAA,YAAAA,QAAAA,IAAAA,MAAAA,GAAAA,CAWdG,KAAAA,SACA,IAAA,SACD,MANDH,GAAAI,KAAA,gBAAAI,KAQA,SAAA,OAAOL,GACP,QAAAM,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACD,MAAK,UAAAC,GACLA,GAAgBC,OAAAC,SAAAC,QAAA,EAIf,KAAA,GADDC,GAAAJ,EAAAI,OAAUC,KACTd,EAAO,EAAPA,EAAAa,EAAAb,IAAA,CACA,GAAAe,GAAAN,EAAAT,GArBFgB,EAAAD,EAAAT,KAAAC,KAAA,KAqCKA,EAAWS,EAAQC,QAAQb,MAAQ,EAAOA,IAAOY,KAZvDT,EACCS,EAAOE,KAACT,GAENC,EAAOC,EAGRI,EAAMF,GAASJ,EACfK,EAAMA,KAAgBC,IAiBtB,GAAGP,EAZF,GAAAD,EACC,GAAGA,YAASY,OAAZ,IAAA,GACCH,GAAAR,EAAAK,OADWO,EAAA,SAELpB,GACNgB,GAAAA,GAAAP,EAAAY,OAAA,SAAAC,GAAA,MAAAA,GAAAlB,KAAAI,EAAAR,KAAA,EACA,IAAAe,EAAA,CAcE,GAAGR,EAAS,CAZfQ,GAAAQ,GAAcP,EAAdV,GAAAW,QAAAb,EACAU,GAAAA,GAAcI,OAAdK,EAAA,OAEDR,GAAAT,GAAA,EAGGC,GAASW,KAAAH,KAVJf,EAAA,EAAAA,EAAAwB,EAAAxB,IAAAoB,EAAApB,OA0BA,CAf0B,GAAAe,GAAAN,EAAAY,OAAA,SAExBrB,GAFwB,MAAAsB,GAAAlB,KAAAI,IAAA,EAGL,IAAAO,EAASO,CAAT,GAAmCf,EAA7D,CACA,GAAGQ,GAAMA,EAAAT,GAAAW,QAAAb,EACRW,GAAGR,GAAHkB,OAAYF,EAAA,OAEXR,GAAAA,GAAYU,EAGZX,GAAAI,KAAAH,QAV6B,IAAAP,YAAAW,OAEhC,IAAA,GA6BMK,GAAuBhB,EAAWK,OA/BRa,EAAA,SAE5B1B,GAA0C,GAAtCA,GAAsCS,EAAAY,OAAA,SAAAC,GAAA,MAAAA,GAAAlB,KAAAI,EAAAR,KAAA,EAY7C,IAAAe,EAAA,CAdF,GAAAR,EAeO,CACN,GAAMQ,GAAON,EAAMY,GAAOJ,QAACK,EAADP,GAASO,GAAAG,OAAWjB,EAApB,OAuBvBO,GAAKT,GAAS,EAnBfQ,GAAcC,KAAKT,KAlBjBN,EAAIA,EAARA,EAAeA,EAAIwB,IAAsBxB,EAArCA,OAqBFe,CACA,GAAAA,GAAAN,EAAAY,OAAA,SAAAC,GAAA,MAAAA,GAAAlB,KAAAI,IAAA,EAEDM,IAAAA,EAAAA,CACA,GAAAP,EAAA,CACD,GAAAgB,GAAAR,EAAAT,GAAAW,QAAAb,EA7BFW,GA8BOT,GAAAmB,OAAAF,EAAA,OAELR,GAAMS,GAAAA,EAELV,GAAaL,KAAMY,IAIjBN,EAAAF,OACAR,EAHDsB,OAGOb,EAAA,WAAAJ,OAAAC,SAAAC,QAAA,KAENF,OAAAC,SAAAC,QAAA,IA8BR,QAASgB,GAAaC,EAAOC,EAAQC,EAAQxB,GAtCxC,GAAAH,GAAIyB,EAAI7B,KAAOA,kBAA+BgC,EAAAH,EAAA/B,KAAA,gBAAAgC,EAAA,MAY7CG,EAAAzC,EAAAqC,EAAAG,EAEyB,OAAA,YAAA,GAAgCnC,GAA1DL,EAAAqC,EAAAG,GAgCGE,EAAarC,YAAgBsB,OAAQtB,EAAQA,GAAQA,KA5BtD,IAAAA,IAAM0B,EAGNR,MAFAA,GAAAA,KAAKT,0BAAL6B,KAAA,YAAA,OACAN,GAHDO,KAGO,iBAAA,OAIPtB,IAAAA,GAAAA,EAAcI,EAAKH,KAAnB,eACAP,EAAAA,MAEF,IAAAyB,YAAAd,OAAA,CACDX,IAGAH,KAAAA,GA6BMQ,GAASoB,EAAQpB,OA7BjBc,EAAN,EAAab,EAAAA,EAAbuB,IAA4B,CAAO3B,GAAAA,GAAgBE,EAAOyB,EAD3DxC,GAEOoB,QAAAqB,MAAA,IACN5B,EAAOC,KAASC,GAChBJ,EAAAU,KAAAoB,SAoCSL,KAhCZzB,EAASoB,GAATK,GAAqCF,EACpCG,EAAWL,KAAMO,GAoChB/B,GAAMkC,KAAKjC,MAAO,KAAMkC,MAAON,GAAa/B,EAAYC,EAAIC,EAAO0B,GAAUD,EAAQvB,EAASC,KA7B9FjB,EAAAkD,UAAMP,aAAarC,GAkCpB6C,OAAOC,aAAcpD","file":"linkedUpdate.min.js","sourcesContent":["/* global jQuery, duck */\r\n\r\nvoid function initLinkedUpdate($, duck) {\r\n\t'use strict';\r\n\r\n\tfunction getVal($wrapper, $field) {\r\n\t\tconst fieldType = $field.attr('duck-type');\r\n\r\n\t\tswitch(fieldType) {\r\n\t\t\tcase 'array' :\r\n\t\t\tcase 'checkbox' : {\r\n\t\t\t\tconst vals = [];\r\n\r\n\t\t\t\t$field.find('[duck-value]').each((i, v) => {\r\n\t\t\t\t\tconst val = $(v).val()\r\n\r\n\t\t\t\t\tif(val) {\r\n\t\t\t\t\t\tvals.push(val);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn vals;\r\n\t\t\t}\r\n\t\t\tcase 'select' : \r\n\t\t\tcase 'string' : {\r\n\t\t\t\treturn $field.find('[duck-value]').val();\r\n\t\t\t}\r\n\t\t\tdefault : {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updateItems(Id, table, field, isArray, removeVals) {\r\n\t\treturn (items) => {\r\n\t\t\tif(!items) {\r\n\t\t\t\twindow.location.reload(true);\r\n\t\t\t}\r\n\r\n\t\t\tconst length = items.length;\r\n\t\t\tconst itemsToUpdate = [];\r\n\t\t\tfor(let i = 0; i < length; i++) {\r\n\t\t\t\tconst item = items[i];\r\n\t\t\t\tlet current = item[field] || (isArray ? [] : '');\r\n\r\n\t\t\t\tif(isArray ? (current.indexOf(Id) === -1) : (Id !== current)) {\r\n\t\t\t\t\tif(isArray) {\r\n\t\t\t\t\t\tcurrent.push(Id);\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrent = Id;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titem[field] = current;\r\n\t\t\t\t\titemsToUpdate.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(removeVals) {\r\n\t\t\t\tif(isArray) {\r\n\t\t\t\t\tif (removeVals instanceof Array) {\r\n\t\t\t\t\t\tconst removeFromValsLength = removeVals.length;\r\n\t\t\t\t\t\tfor(let i = 0; i < removeFromValsLength; i++) {\r\n\t\t\t\t\t\t\tconst item = items.filter((itm) => itm.Id === removeVals[i])[0];\r\n\t\t\t\t\t\t\tif(item) {\r\n\t\t\t\t\t\t\t\tif(isArray) {\r\n\t\t\t\t\t\t\t\t\tconst index = item[field].indexOf(Id);\r\n\t\t\t\t\t\t\t\t\titem[field].splice(index, 1);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\titem[field] = '';\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\titemsToUpdate.push(item);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst item = items.filter((itm) => itm.Id === removeVals)[0];\r\n\r\n\t\t\t\t\t\tif(item) {\r\n\t\t\t\t\t\t\tif(isArray) {\r\n\t\t\t\t\t\t\t\tconst index = item[field].indexOf(Id);\r\n\t\t\t\t\t\t\t\titem[field].splice(index, 1);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\titem[field] = '';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\titemsToUpdate.push(item);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (removeVals instanceof Array) {\r\n\t\t\t\t\t\tconst removeFromValsLength = removeVals.length;\r\n\t\t\t\t\t\tfor(let i = 0; i < removeFromValsLength; i++) {\r\n\t\t\t\t\t\t\tconst item = items.filter((itm) => itm.Id === removeVals[i])[0];\r\n\t\t\t\t\t\t\tif(item) {\r\n\t\t\t\t\t\t\t\tif(isArray) {\r\n\t\t\t\t\t\t\t\t\tconst index = item[field].indexOf(Id);\r\n\t\t\t\t\t\t\t\t\titem[field].splice(index, 1);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\titem[field] = '';\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\titemsToUpdate.push(item);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst item = items.filter((itm) => itm.Id === removeVals)[0];\r\n\r\n\t\t\t\t\t\tif(item) {\r\n\t\t\t\t\t\t\tif(isArray) {\r\n\t\t\t\t\t\t\t\tconst index = item[field].indexOf(Id);\r\n\t\t\t\t\t\t\t\titem[field].splice(index, 1);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\titem[field] = '';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\titemsToUpdate.push(item);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(itemsToUpdate.length) {\r\n\t\t\t\ttable.update(itemsToUpdate, () => {window.location.reload(true)});\r\n\t\t\t} else {\r\n\t\t\t\twindow.location.reload(true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction linkedUpdate($this, field1, field2, isArray) {\r\n\t\tconst Id = $this.attr('duck-key-value'); // get the acting items Id\r\n\t\tconst $field1 = $this.find(`[duck-field='${field1}']`);\r\n\t\tconst oldVals = getVal($this, $field1); // get the acting itmes Values from before it was updated\r\n\r\n\t\t// runs after ajax is complete\r\n\t\treturn () => {\r\n\t\t\tconst vals = getVal($this, $field1); // get the acting items updated values\r\n\t\t\tconst valsToFind = vals instanceof Array ? vals : (vals ? [vals] : []);\r\n\r\n\t\t\t// if the old vals are the same as the old ones, don't do anything\r\n\t\t\tif (vals === oldVals) {\r\n\t\t\t\t$this.find('[duck-button=\"submit\"]').prop('disabled', false);\r\n\t\t\t\t$this.attr('duck-edit-form', 'view');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst table = duck($this.attr('duck-table'));\r\n\t\t\tlet removeVals;\r\n\r\n\t\t\tif(oldVals instanceof Array) {\r\n\t\t\t\tremoveVals = [];\r\n\t\t\t\tconst length = oldVals.length;\r\n\r\n\t\t\t\tfor(let j = 0; j < length; j++) {\r\n\t\t\t\t\tconst currentId = oldVals[j];\r\n\r\n\t\t\t\t\tif(vals.indexOf(currentId) === -1) {\r\n\t\t\t\t\t\tvalsToFind.push(currentId);\r\n\t\t\t\t\t\tremoveVals.push(currentId);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if(oldVals) {\r\n\t\t\t\tremoveVals = isArray ? [oldVals] : oldVals;\r\n\t\t\t\tvalsToFind.push(oldVals);\r\n\t\t\t}\r\n\r\n\t\t\ttable.get({field: 'Id', value: valsToFind}, updateItems(Id, table, field2 || field1, isArray, removeVals));\r\n\t\t}\r\n\t}\r\n\r\n\tduck.callbacks.linkedUpdate = linkedUpdate;\r\n}(jQuery.noConflict(), duck)"]}