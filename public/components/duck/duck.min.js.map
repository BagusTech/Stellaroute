{"version":3,"sources":["components/duck/duck.js"],"names":["$","setCSRFToken","securityToken","ajaxPrefilter","CSRF_HEADER","options","_","xhr","crossDomain","setRequestHeader","e","stopPropagation","uuid","replace","c","r","Math","random","v","renderPug","file","locals","success","ajax","type","url","contentType","sendEmail","request","failure","data","JSON","stringify","fail","sendResetEmail","email","successCallback","errorCallback","findRelevantChildren","$elem","selector","children","relevantChildren","allChildren","filter","i","item","is","otherChildren","not","this","add","method","_duck","exists","table","error","get","dataType","key","id","attr","duck","stopProp","callbacks"],"mappings":"iBAAA,UAAAA,GAQC,QAASC,GAAaC,GAFtBF,EAAAG,cAAMC,SAAcC,EAAAC,EAAAC,GAIbA,EAAIC,aAFXD,EAAAE,iBAAsBP,EAAeA,KAQrCD,QAAAA,GAAeS,GAIdA,EAAEC,kBACF,QAAAC,KAIA,MAAO,uCAAuCC,QAAQ,QAAS,SAACC,GAFjE,GAAAC,GAAA,GAAAC,KAAAC,SAAA,EAAAC,EAAA,MAAAJ,EAAAC,EAAA,EAAAA,EAAA,CACA,OAASH,GAAAA,SAAO,MAId,QAHDO,GAAAC,EAAAC,EAAAC,GAIAtB,EAAAuB,MAKCC,KAAM,MAHRC,IAAA,aACAC,YAASP,OACRnB,MAAOoB,KAAAA,EAAAC,OAAAA,GACNG,QAAAA,IAQF,QAAAG,GAAAC,EAAAN,EAAAO,GACA7B,EAAAuB,MACAC,KAAA,OACAM,KAAAC,KAAAC,UAAAJ,GACAH,IAAA,aACCzB,YAAO,qBACNwB,KAAMF,GADAW,KAAAJ,GAQR,QAAAK,GAAAC,EAAAC,EAAAC,GACA,MAAA,YACArC,EAAAuB,MACAE,IAAAA,kBACAC,YAASQ,mBACRJ,KAAOC,KAAAC,WAAMG,MAAAA,IACZnC,OAAO,OACNyB,QAAAA,EACAC,MAAAA,KA8BH,QAASY,GAAqBC,EAAOC,GACpC,IAAID,IAAUC,EACb,OAAO,CADR,IAAID,GAAUC,EAAUC,WACvBC,EAAAC,EAAAC,OAAA,SAAAC,EAAAC,GAAA,MAAA9C,GAAA8C,GAAAC,GAAAP,KACAQ,EAAAL,EAAAM,IAAAT,EAED,OAAAQ,GAAML,OACAD,EAAmBC,IAAAA,EAAmBK,EAAAR,IACtCQ,EAGJ,QAAON,GAAAA,GACRQ,KAAAC,IAAA,SAAAL,EAAAV,EAAAC,GAOArC,EAAEuB,MALHE,IAAAA,QAAOiB,EACPhB,YAAA,mBAOE0B,OAAQ,OALXtB,KAASuB,KAATrB,UAAsBc,GACrBxB,QAAWc,EACVpC,MAAOqC,KAeRa,KAAKI,OAAS,SAACjD,EAAS+B,EAAiBC,GALzCrC,EAAAuB,MACAE,IAAAA,WAAA8B,EACA7B,YAAA,OACAI,KAAAzB,EACAiB,QAAAc,EACAoB,MAAKF,KAeLJ,KAAKO,IAAM,SAACpD,EAAS+B,EAAiBC,GALtCrC,EAAAuB,MACAE,IAAAA,QAAA8B,EACA7B,YAAA,OACAgC,SAAA,OACA5B,KAAAzB,EACAiB,QAAWc,EACVpC,MAAOqC,KAKNf,KAAAA,OAASc,SAAAA,EAAAA,EALHC,GAMNmB,EAAAA,MAND/B,IAAAA,WAAA8B,EADD7B,YAAA,mBAgBE0B,OAAQ,OALVtB,KAAAC,KAAAC,WAAAc,KAAAA,IACAxB,QAAAc,EACCpC,MAAOqC,KAKNf,KAAAA,OAASc,SAAAA,EAAAA,EALHC,GAMNmB,EAAAA,MAND/B,IAAAA,WAAA8B,EADD7B,YAAA,mBAgBE0B,OAAQ,OALVtB,KAAAC,KAAAC,WAAA2B,IAAAC,IACAtC,QAAAc,EACCpC,MAAOqC,KAINP,KAAAA,WAAWE,SAAAA,EAJLK,GAKNf,EAAAA,MACAkC,IAAAA,sBAAOnB,EANRe,OAAA,OADD9B,QAAAc,EAgBEoB,MAAOnB,KA/KV,GAAMjC,GAAc,cAOlBH,GAJDD,EAAA,2BAAA6D,KAAA,WA4KEL,IAAAA,GAAOnB,SAAAA,GAAAA,MAAAA,IAAAA,GAAAA,GAERyB,GAPDC,SAAAA,EAQAD,EAAAlD,KAAAA,EAODkD,EAAK3C,UAAYA,EALjB2C,EAAAnC,UAAAA,EACAmC,EAAMA,eAAAA,EAAOA,EAAAxB,qBAAAA,EAAAwB,EAAbE,aAEAF,OAAKC,KAALD,GACAA,OAAKlD","file":"duck.min.js","sourcesContent":["/*global jQuery */\r\n\r\nvoid function initDuck($){\r\n\t'use strict'\r\n\r\n\t// secure ajax requests\r\n\tconst CSRF_HEADER = 'X-CSRF-Token';\r\n\r\n\tfunction setCSRFToken(securityToken) {\r\n\t\t$.ajaxPrefilter((options, _, xhr) => {\r\n\t\t\tif (!xhr.crossDomain) {\r\n\t\t\t\txhr.setRequestHeader(CSRF_HEADER, securityToken);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tsetCSRFToken($('meta[name=\"csrf-token\"]').attr('content'));\r\n\r\n\t// stops propagation\r\n\tfunction stopProp(e) {\r\n\t\te.stopPropagation();\r\n\t}\r\n\r\n\t// generates a universally unique ID (UUID)\r\n\tfunction uuid() {\r\n\t\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n\t\t\tconst r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);\r\n\t\t\treturn v.toString(16);\r\n\t\t})\r\n\t}\r\n\r\n\t// renders a pug file with given locals\r\n\tfunction renderPug(file, locals, success) {\r\n\t\t$.ajax({\r\n\t\t\ttype: 'GET',\r\n\t\t\turl: '/renderPug',\r\n\t\t\tcontentType: 'json',\r\n\t\t\tdata: {file, locals},\r\n\t\t\tsuccess,\r\n\t\t});\r\n\t}\r\n\r\n\t// sends an email, needs the html OR the template\r\n\t// request = {html: (optional)String, template: (optional)String, toEmail: (optional)String, subject: String}\r\n\t// success = function\r\n\t// failure = function\r\n\tfunction sendEmail(request, success, failure) {\r\n\t\t$.ajax({\r\n\t\t\ttype: 'POST',\r\n\t\t\tdata: JSON.stringify(request),\r\n\t\t\turl: '/sendEmail',\r\n\t\t\tcontentType: 'application/json',\r\n\t\t}).done(success).fail(failure);\r\n\t}\r\n\r\n\t// send an email to the appropiate user, giving them a randomized, unique password\r\n\t// id = string (id of user in database)\r\n\t// successCallback = function\r\n\t// errorCallback = function\r\n\tfunction sendResetEmail(email, successCallback, errorCallback) {\r\n\t\treturn () => {\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: `/reset-password`,\r\n\t\t\t\tcontentType: 'application/json',\r\n\t\t\t\tdata: JSON.stringify({ email }),\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tsuccess: successCallback,\r\n\t\t\t\terror: errorCallback,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// finds the first level of children that match a selector\r\n\t// $elem = jQuery object\r\n\t// selector = string\r\n\t// example\r\n\t/*\r\n\t\thtml:\r\n\t\t\t.foo\r\n\t\t\t\t.bar\r\n\t\t\t\t\t.bar\r\n\t\t\t\t.other\r\n\t\t\t\t\t.bar\r\n\t\tfindRelevantChildren($('.foo'), '.bar')\r\n\r\n\t\telems that are returned\r\n\t\thtml:\r\n\t\t\t.foo\r\n\t\t\t\t.bar(I AM RETURNED)\r\n\t\t\t\t\t.bar\r\n\t\t\t\t.other\r\n\t\t\t\t\t.bar(I AM RETURNED)\r\n\t*/\r\n\tfunction findRelevantChildren($elem, selector) {\r\n\t\tif(!$elem || !selector) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst allChildren = $elem.children();\r\n\t\tconst relevantChildren = allChildren.filter((i, item) => $(item).is(selector));\r\n\t\tconst otherChildren = allChildren.not(selector);\r\n\r\n\t\tif(otherChildren.length){\r\n\t\t\t\treturn relevantChildren.add(findRelevantChildren(otherChildren, selector));\r\n\t\t}\r\n\t\t\r\n\t\treturn relevantChildren;\r\n\t}\r\n\r\n\tfunction _duck(table) {\r\n\t\tthis.add = (item, successCallback, errorCallback) => {\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: `/add/${table}`,\r\n\t\t\t\tcontentType: 'application/json',\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tdata: JSON.stringify(item),\r\n\t\t\t\tsuccess: successCallback,\r\n\t\t\t\terror: errorCallback,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// (object)options\r\n\t\t// -- (string)field - the field to search on\r\n\t\t// -- (dynamic)value - matches the type the field represents\r\n\t\t// -- (bool)findOne - if true, returns at most 1 item\r\n\t\t// if no options are passed in, return how many items are in the table\r\n\t\tthis.exists = (options, successCallback, errorCallback) => {\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: `/exists/${table}`,\r\n\t\t\t\tcontentType: 'json',\r\n\t\t\t\tdata: options,\r\n\t\t\t\tsuccess: successCallback,\r\n\t\t\t\terror: errorCallback,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// (object)options\r\n\t\t// -- (string)field - the field to search on\r\n\t\t// -- (dynamic)value - matches the type the field represents\r\n\t\t// -- (bool)findOne - if true, returns at most 1 item\r\n\t\t// if no options are passed in, return all items in provided table\r\n\t\tthis.get = (options, successCallback, errorCallback) => {\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: `/get/${table}`,\r\n\t\t\t\tcontentType: 'json',\r\n\t\t\t\tdataType: 'json',\r\n\t\t\t\tdata: options,\r\n\t\t\t\tsuccess: successCallback,\r\n\t\t\t\terror: errorCallback,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// (object)item is what will be added to the table provided\r\n\t\tthis.update = (item, successCallback, errorCallback) => {\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: `/update/${table}`,\r\n\t\t\t\tcontentType: 'application/json',\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tdata: JSON.stringify({item}),\r\n\t\t\t\tsuccess: successCallback,\r\n\t\t\t\terror: errorCallback,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// (string)id is which item will be deleted from the provided table\r\n\t\tthis.delete = (id, successCallback, errorCallback) => {\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: `/delete/${table}`,\r\n\t\t\t\tcontentType: 'application/json',\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tdata: JSON.stringify({key: id}),\r\n\t\t\t\tsuccess: successCallback,\r\n\t\t\t\terror: errorCallback,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.clearCache = (successCallback, errorCallback) => {\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: `/admin/clear-cache/${table}`,\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tsuccess: successCallback,\r\n\t\t\t\terror: errorCallback,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// initialize with table name\r\n\tconst duck = (table) => (new _duck(table));\r\n\r\n\tduck.stopProp = stopProp;\r\n\tduck.uuid = uuid;\r\n\tduck.renderPug = renderPug;\r\n\tduck.sendEmail = sendEmail;\r\n\tduck.sendResetEmail = sendResetEmail;\r\n\tduck.findRelevantChildren = findRelevantChildren;\r\n\tduck.callbacks = {};\r\n\r\n\twindow.duck = duck;\r\n}(jQuery.noConflict());"]}