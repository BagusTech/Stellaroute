{"version":3,"sources":["components/duck/form/form.js"],"names":["$","duck","window","deleteArrayItem","e","stopPropagation","preventDefault","remove","this","closest","trigger","addArrayItem","addDirection","$this","attr","target","find","first","$wrapper","last","$item","prop","clone","$clone","after","before","$lastItem","click","makeTabs","each","i","idItem","$idItem","currentId","uuid","makeAccordion","parent","empty","append","summernote","summernoteOptions","text","guideCard","sortable","obj","fieldName","newObj","key","parseObject","findRelevantChildren","parseArray","buildObjectFunction","value","$objectToUpdate","$objec","filter","objec","o","keyValue","indexOfCurrentId","map","indexOf","splice","push","arrayItem","val","parseCheckbox","j","checkbox","$checkbox","length","parseRadio","parseWysiwyg","$context","item","type","buildObject","isInputValue","$urlFromField","$urlField","replace","toLowerCase","addItem","table","$startOfFields","successCallback","errorCallBack","itemToAdd","add","findOne","data","originalPassword","local","password","split","goTo","currentLocation","pop","newLocation","join","location","href","editForm","wrapper","submitForm","crud","triggerSubmitForm","startOfFields","currentTarget","updateItem","deleteItem","duckForm","options","$editButton","$cancelButton","autoSetUrl","on","off","$itemChildren","fn","index","jQuery"],"mappings":"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","file":"form.min.js","sourcesContent":["/* global jQuery, duck, window */\r\n\r\nvoid function initDuckForm($, duck, window) {\r\n\t'use strict'\r\n\r\n\tfunction deleteArrayItem(e) {\r\n\t\te.stopPropagation();\r\n\t\te.preventDefault();\r\n\t\t\r\n\t\t$(this).closest('[duck-type]').remove();\r\n\t\t$(this).closest('[duck-type=\"array\"]').trigger('duckArrayItemDeleted');\r\n\t}\r\n\r\n\tfunction addArrayItem(e) {\r\n\t\te.stopPropagation();\r\n\t\te.preventDefault();\r\n\r\n\t\tconst $this = $(this);\r\n\t\tconst addDirection = $this.attr('duck-add');\r\n\t\tconst target = $this.attr('duck-targt');\r\n\t\tconst $wrapper = target ? $(target) : $this.closest('[duck-type=\"array\"]');\r\n\t\tconst $item = $wrapper.find('[duck-type]').first();\r\n\t\tconst $lastItem = $item.parent().find('> [duck-type]').last();\r\n\t\tconst $clone = $wrapper.prop('ArrayItemTemplate') ? $wrapper.prop('ArrayItemTemplate').clone() : $item.clone();\r\n\r\n\t\tswitch(addDirection) {\r\n\t\t\tcase 'after' : {\r\n\t\t\t\t$this.closest('[duck-type]').after($clone)\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'before' : {\r\n\t\t\t\t$this.closest('[duck-type]').before($clone)\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault : {\r\n\t\t\t\t$lastItem.after($clone);\r\n\t\t\t\tbreak;\t\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$clone.find('[duck-button=\"delete\"]').click(deleteArrayItem);\r\n\t\t$clone.find('[data-function=\"tabs\"]').makeTabs();\r\n\t\t$clone.find('[id]').each((i, idItem) => {\r\n\t\t\tconst $idItem = $(idItem);\r\n\t\t\tconst currentId = $idItem.attr('id');\r\n\t\t\tconst newId = currentId + duck.uuid();\r\n\r\n\t\t\t$idItem.attr('id', newId).prop('id', newId);\r\n\t\t});\r\n\t\t$clone.find('[data-function=\"accordion\"]').makeAccordion();\t\t\r\n\r\n\t\tif($item.attr('duck-type') === 'object'){\r\n\t\t\t$clone.find('input[type=\"checkbox\"], input[type=\"radio\"]').prop('checked', false);\r\n\t\t\t$clone.find('.summernote').parent().empty().append('<div class=\"summernote\"></div>').find('> .summernote').summernote(window.summernoteOptions);\r\n\t\t\t$clone.find('[duck-type=\"array\"] > [duck-type]:not(:first-of-type)').remove();\r\n\t\t\t$clone.find('[duck-button=\"add\"]').click(addArrayItem);\r\n\t\t}\r\n\r\n\t\tif($item.attr('duck-type') === 'image') {\r\n\t\t\t$clone.prop('filePickerInitiated', false);\r\n\t\t\t$clone.find('[duck-image-value]').text('');\r\n\t\t}\r\n\r\n\t\t\r\n\t\t$clone.find('.js-card').guideCard();\r\n\t\t$item.parent().sortable('[duck-type]');\r\n\r\n\t\t$wrapper.trigger('duckArrayItemAdded', [$clone]);\r\n\t\t$wrapper.closest('[data-function*=\"scroll\"]').trigger('initScroll')\r\n\t}\r\n\r\n\tfunction parseObject(obj, $item, fieldName, buildObjectFunction) {\r\n\t\tconst key = $item.attr('duck-key');\r\n\t\tconst newObj = obj[fieldName] || {};\r\n\r\n\t\tif(key && !newObj[key]){\r\n\t\t\tnewObj[key] = $item.attr('duck-key-value') || duck.uuid();\r\n\t\t}\r\n\r\n\t\tobj[fieldName] = buildObjectFunction(newObj, duck.findRelevantChildren($item, '[duck-field]'));\r\n\t}\r\n\r\n\tfunction parseArray(obj, $item, fieldName, buildObjectFunction) {\r\n\t\tconst $objectToUpdate = duck.findRelevantChildren($item, '[duck-type=\"object\"]');\r\n\t\tconst value = $objectToUpdate.first().attr('duck-key') ? obj[fieldName] || [] : [];\r\n\r\n\t\tif($objectToUpdate.length) {\r\n\t\t\t$objectToUpdate.each((i, objec) => {\r\n\t\t\t\tconst $objec = $(objec);\r\n\t\t\t\tconst key = $objec.attr('duck-key');\r\n\t\t\t\tconst keyValue = $objec.attr('duck-key-value') || duck.uuid();\r\n\t\t\t\tconst newObj = key ? value.filter((o) => o[key] === keyValue)[0] || {} : {}\r\n\r\n\t\t\t\t// if the key is defined, the object is being altered/added without the context of the other items\r\n\t\t\t\tif(key){\r\n\t\t\t\t\t// if the key doesn't have a preset value, give it a uuid\r\n\t\t\t\t\tnewObj[key] = keyValue;\r\n\r\n\t\t\t\t\t// check to see if an item with the same key exists in the array\r\n\t\t\t\t\tconst indexOfCurrentId = value.map((o) => o[key]).indexOf(newObj[key]);\r\n\r\n\t\t\t\t\t// if it does, remove it from the list of values\r\n\t\t\t\t\tif(indexOfCurrentId !== -1){\r\n\t\t\t\t\t\tvalue.splice(indexOfCurrentId, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// add the new object to the list of values\r\n\t\t\t\tvalue.push(buildObjectFunction(newObj, duck.findRelevantChildren($objec, '[duck-field]')));\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t$item.find('[duck-value]').each((i, arrayItem) => {\r\n\t\t\t\tconst val = $(arrayItem).val();\r\n\r\n\t\t\t\tif(val){\r\n\t\t\t\t\tvalue.push(val);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif(obj[fieldName] || value.length){\r\n\t\t\tobj[fieldName] = value;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction parseCheckbox(obj, $item, fieldName) {\r\n\t\tconst value = [];\r\n\r\n\t\t$item.find('input[type=\"checkbox\"]').each((j, checkbox) => {\r\n\t\t\tconst $checkbox = $(checkbox);\r\n\r\n\t\t\tif($checkbox.prop('checked')){\r\n\t\t\t\tvalue.push($checkbox.val());\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif(obj[fieldName] || value.length){\r\n\t\t\tobj[fieldName] = value;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction parseRadio(obj, $item, fieldName) {\r\n\t\tconst value = $item.find('input[type=\"radio\"]:checked').val();\r\n\r\n\t\tif(obj[fieldName] || value){\r\n\t\t\tobj[fieldName] = value;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction parseWysiwyg(obj, $item, fieldName) {\r\n\t\tconst value = $item.find('.summernote').summernote('code');\r\n\r\n\t\tif(value){\r\n\t\t\tobj[fieldName] = value;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction buildObject(obj, $context) {\r\n\t\t$context.each((i, item) => {\r\n\t\t\tconst $item = $(item);\r\n\t\t\tconst fieldName = $item.attr('duck-field');\r\n\t\t\tconst type = $item.attr('duck-type');\r\n\r\n\t\t\tswitch(type){\r\n\t\t\t\tcase 'object': {\r\n\t\t\t\t\tparseObject(obj, $item, fieldName, buildObject);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'array': {\r\n\t\t\t\t\tparseArray(obj, $item, fieldName, buildObject);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'checkbox': {\r\n\t\t\t\t\tparseCheckbox(obj, $item, fieldName);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'radio': {\r\n\t\t\t\t\tparseRadio(obj, $item, fieldName);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'bool': {\r\n\t\t\t\t\tobj[fieldName] = $item.prop('checked') || $item.find('input[type=\"checkbox\"]').prop('checked');\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'wysiwyg': {\r\n\t\t\t\t\tparseWysiwyg(obj, $item, fieldName);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'image':\r\n\t\t\t\tcase 'select': \r\n\t\t\t\tcase 'number': \r\n\t\t\t\tcase 'string':\r\n\t\t\t\tdefault: {\r\n\t\t\t\t\tconst isInputValue = $item.val();\r\n\t\t\t\t\tconst value = isInputValue ? isInputValue : $item.find('[duck-value]').val();\r\n\r\n\t\t\t\t\tif(obj[fieldName] || value){\r\n\t\t\t\t\t\tobj[fieldName] = value;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn obj;\r\n\t}\r\n\r\n\tfunction autoSetUrl($urlField, $urlFromField) {\r\n\t\t$urlFromField.on('input', () => {\r\n\t\t\t$urlField.val($urlFromField.val().replace(/'/g, '').replace(/[^a-zA-Z0-9]/g, '-').toLowerCase()).trigger('validate');\r\n\t\t});\r\n\t}\r\n\r\n\tfunction addItem($wrapper, table, key, keyValue, $startOfFields, successCallback, errorCallBack) {\r\n\t\tconst item = {};\r\n\t\titem[key] = keyValue || duck.uuid();\r\n\r\n\t\tconst itemToAdd = buildObject(item, $startOfFields);\r\n\r\n\t\tduck(table).add(itemToAdd, successCallback, errorCallBack);\r\n\t\t$wrapper.trigger('duck.form.submitted', [itemToAdd]);\r\n\t}\r\n\r\n\tfunction updateItem($wrapper, table, key, keyValue, $startOfFields, successCallback, errorCallBack) {\r\n\t\tduck(table).get({field: key, value: keyValue, findOne: true}, (data) => {\r\n\t\t\tconst originalPassword = table === 'Users' ? data.local && data.local.password : false; // due to how javascript references values, this has to be declared before the item is built;\r\n\t\t\tconst item = buildObject(data, $startOfFields);\r\n\r\n\t\t\t// because the password is encrypted, it will save over the old password, thinking an update was made\r\n\t\t\tif(originalPassword) {\r\n\t\t\t\tif(item.local.password === originalPassword) {\r\n\t\t\t\t\tdelete item.local.password;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tduck(table).update(item, successCallback, errorCallBack);\r\n\t\t\t$wrapper.trigger('duck.form.submitted', [item]);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction deleteItem($wrapper, table, key, keyValue) {\r\n\t\tconst item = {}\r\n\t\titem[key] = keyValue;\r\n\r\n\t\tduck(table).delete(keyValue, () => {\r\n\t\t\tconst currentLocation = window.location.href.split('/');\r\n\t\t\tconst goTo = $wrapper.attr('duck-goTo');\r\n\r\n\t\t\tif(currentLocation[currentLocation.length - 1]){\r\n\t\t\t\tcurrentLocation.pop();\r\n\t\t\t} else {\r\n\t\t\t\tcurrentLocation.pop();\r\n\t\t\t\tcurrentLocation.pop();\r\n\t\t\t}\r\n\r\n\t\t\tconst newLocation = goTo ? goTo : currentLocation.join('/');\r\n\t\t\tif(window.location.href === newLocation) {\r\n\t\t\t\twindow.location.reload(true);\r\n\t\t\t} else{\r\n\t\t\t\twindow.location.href = newLocation;\r\n\t\t\t}\r\n\t\t});\r\n\t\t$wrapper.trigger('duck.form.submitted', [item]);\r\n\t}\r\n\r\n\tfunction editForm(e) {\r\n\t\tconst $wrapper = e.data.wrapper;\r\n\r\n\t\t$wrapper.attr('duck-edit-form', $wrapper.attr('duck-edit-form') === 'view' ? 'edit' : 'view');\r\n\t\t$('[data-function*=\"scroll\"]').trigger('initScroll');\r\n\t}\r\n\r\n\tfunction triggerSubmitForm(e) {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\r\n\t\te.data.wrapper.trigger('duck.form.submit');\r\n\t}\r\n\r\n\tfunction submitForm(e) {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\r\n\t\tconst crud = e.data.crud;\r\n\t\tconst table = e.data.table;\r\n\t\tconst key = e.data.key;\r\n\t\tconst keyValue = e.data.keyValue;\r\n\t\tconst $startOfFields = e.data.startOfFields;\r\n\t\tconst $wrapper = e.data.wrapper;\r\n\t\tconst successCallback = e.data.successCallback;\r\n\t\tconst errorCallBack = e.data.errorCallBack;\r\n\r\n\t\t$(e.currentTarget).prop('disabled', true);\r\n\r\n\t\tswitch(crud){\r\n\t\t\t// adds an item to the table\r\n\t\t\tcase 'add':{\r\n\t\t\t\taddItem($wrapper, table, key, keyValue, $startOfFields, successCallback, errorCallBack);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// updates an item from the table\r\n\t\t\tcase 'update':{\r\n\t\t\t\tupdateItem($wrapper, table, key, keyValue, $startOfFields, successCallback, errorCallBack);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// deletes an item from the table\r\n\t\t\tcase 'delete':{\r\n\t\t\t\tdeleteItem($wrapper, table, key, keyValue);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tdefault:\r\n\t\t}\r\n\t}\r\n\r\n\tfunction duckForm(wrapper, options) {\r\n\t\tconst $wrapper = $(wrapper);\r\n\t\tconst $startOfFields = duck.findRelevantChildren($wrapper, '[duck-field]');\r\n\t\tconst $editButton = $wrapper.find('[duck-button=\"edit\"]');\r\n\t\tconst $cancelButton = $wrapper.find('[duck-button=\"cancel\"]');\r\n\t\tconst table = (options && options.table) || $wrapper.attr('duck-table');\r\n\t\tconst crud = (options && options.crud) || $wrapper.attr('duck-function');\r\n\t\tconst key = (options && options.key) || $wrapper.attr('duck-key');\r\n\t\tconst keyValue = (options && options.keyValue) || $wrapper.attr('duck-key-value');\r\n\t\tconst $urlField = $wrapper.find('[duck-field=\"url\"] input');\r\n\t\tconst successCallback = (options && options.successCallback) || ((data) => {$wrapper.trigger('duck.form.success', [data])});\r\n\t\tconst errorCallBack = (options && options.errorCallBack) || (() => {$wrapper.trigger('duck.form.error')});\r\n\r\n\t\tif($urlField.length){\r\n\t\t\tautoSetUrl($urlField, $wrapper.find('[duck-field=\"names\"] [duck-field=\"display\"] input'));\r\n\t\t}\r\n\r\n\t\tif(!table || !crud || !key || ((crud === 'update' || crud === 'delete') && !keyValue)) {\r\n\t\t\treturn; // need to have a table, key, and it's function set, and must have key value if it's for an update or delete\r\n\t\t}\r\n\r\n\t\t$editButton.off('click', editForm)\r\n\t\t\t\t.on('click', {wrapper: $wrapper}, editForm);\r\n\t\t$cancelButton.off('click', editForm)\r\n\t\t\t\t\t.on('click', {wrapper: $wrapper}, editForm);\r\n\r\n\t\t// set what happens when the submit button is clicked\r\n\t\t$wrapper.off('click', triggerSubmitForm)\r\n\t\t\t\t.on('click', '[duck-button=\"submit\"]', {wrapper: $wrapper}, triggerSubmitForm);\r\n\r\n\t\t$wrapper.off('duck.form.submit', submitForm).on('duck.form.submit', {crud, table, key, keyValue, wrapper: $wrapper, startOfFields: $startOfFields, successCallback, errorCallBack}, submitForm)\r\n\r\n\t\t// set arrays to be sortable\r\n\t\t$wrapper.find('[duck-type=\"array\"]')\r\n\t\t\t\t.each((i, item) => {\r\n\t\t\t\t\tconst $item = $(item);\r\n\t\t\t\t\tconst $itemChildren = duck.findRelevantChildren($item, '[duck-type]');\r\n\r\n\t\t\t\t\t$itemChildren.first().parent().sortable('[duck-type]');\r\n\t\t\t\t});\r\n\r\n\t\t// make add and delete item from array work\r\n\t\t$wrapper.find('[duck-button=\"add\"]').off('click', addArrayItem).click(addArrayItem);\r\n\t\t$wrapper.find('[duck-button=\"delete\"]').off('click', deleteArrayItem).click(deleteArrayItem);\r\n\t}\r\n\r\n\t$.fn.duckForm = function init(options) {\r\n\t\treturn this.each((index, wrapper) => {\r\n\t\t\tduckForm(wrapper, options);\r\n\t\t});\r\n\t}\r\n\r\n\t$(() => {$('[duck-table]').duckForm();});\r\n}(jQuery.noConflict(), duck, window)"]}