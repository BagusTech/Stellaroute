{"version":3,"sources":["components/duck/form/form.js"],"names":["$","duck","window","deleteArrayItem","e","stopPropagation","preventDefault","this","remove","trigger","closest","$this","addArrayItem","attr","$wrapper","target","find","first","addDirection","last","prop","clone","$item","$lastItem","$clone","after","before","click","makeTabs","i","idItem","$idItem","currentId","newId","uuid","parent","empty","append","summernote","summernoteOptions","text","guideCard","sortable","obj","path","value","pathList","split","length","_loop","field","isLastItem","removeFromObject","_typeof","isObject","Array","type","newPathList","slice","splice","indexOf","indexToSplice","_ret","buildObjectFunction","key","newObj","fieldName","findRelevantChildren","parseArray","$objectToUpdate","parseObject","each","objec","$objec","keyValue","filter","o","map","push","arrayItem","val","indexOfCurrentId","$checkbox","parseRadio","parseCheckbox","editor","$context","item","parseWysiwyg","buildObject","isInputValue","autoSetUrl","$urlField","$urlFromField","on","replace","toLowerCase","addItem","table","$startOfFields","successCallback","errorCallBack","itemToAdd","updateItem","get","findOne","data","originalPassword","local","password","update","deleteItem","currentLocation","location","href","goTo","pop","newLocation","join","reload","editForm","triggerSubmitForm","wrapper","deleteFieldFromItem","submitForm","crud","startOfFields","duckForm","options","$editButton","off","$cancelButton","$itemChildren","index"],"mappings":"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","file":"form.min.js","sourcesContent":["/* global jQuery, duck, window */\r\n\r\nvoid function initDuckForm($, duck, window) {\r\n\t'use strict'\r\n\r\n\tfunction deleteArrayItem(e) {\r\n\t\te.stopPropagation();\r\n\t\te.preventDefault();\r\n\t\t\r\n\t\t$(this).closest('[duck-type]').remove();\r\n\t\t$(this).closest('[duck-type=\"array\"]').trigger('duckArrayItemDeleted');\r\n\t}\r\n\r\n\tfunction addArrayItem(e) {\r\n\t\te.stopPropagation();\r\n\t\te.preventDefault();\r\n\r\n\t\tconst $this = $(this);\r\n\t\tconst addDirection = $this.attr('duck-add');\r\n\t\tconst target = $this.attr('duck-targt');\r\n\t\tconst $wrapper = target ? $(target) : $this.closest('[duck-type=\"array\"]');\r\n\t\tconst $item = $wrapper.find('[duck-type]').first();\r\n\t\tconst $lastItem = $item.parent().find('> [duck-type]').last();\r\n\t\tconst $clone = $wrapper.prop('ArrayItemTemplate') ? $wrapper.prop('ArrayItemTemplate').clone() : $item.clone();\r\n\r\n\t\tswitch(addDirection) {\r\n\t\t\tcase 'after' : {\r\n\t\t\t\t$this.closest('[duck-type]').after($clone)\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'before' : {\r\n\t\t\t\t$this.closest('[duck-type]').before($clone)\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault : {\r\n\t\t\t\t$lastItem.after($clone);\r\n\t\t\t\tbreak;\t\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$clone.find('[duck-button=\"delete\"]').click(deleteArrayItem);\r\n\t\t$clone.find('[data-function=\"tabs\"]').makeTabs();\r\n\t\t$clone.find('[id]').each((i, idItem) => {\r\n\t\t\tconst $idItem = $(idItem);\r\n\t\t\tconst currentId = $idItem.attr('id');\r\n\t\t\tconst newId = currentId + duck.uuid();\r\n\r\n\t\t\t$idItem.attr('id', newId).prop('id', newId);\r\n\t\t});\r\n\t\t$clone.find('[data-function=\"accordion\"]').makeAccordion();\t\t\r\n\r\n\t\tif($item.attr('duck-type') === 'object'){\r\n\t\t\t$clone.find('input[type=\"checkbox\"], input[type=\"radio\"]').prop('checked', false);\r\n\t\t\t$clone.find('.summernote').parent().empty().append('<div class=\"summernote\"></div>').find('> .summernote').summernote(window.summernoteOptions);\r\n\t\t\t$clone.find('[duck-type=\"array\"] > [duck-type]:not(:first-of-type)').remove();\r\n\t\t\t$clone.find('[duck-button=\"add\"]').click(addArrayItem);\r\n\t\t}\r\n\r\n\t\tif($item.attr('duck-type') === 'image') {\r\n\t\t\t$clone.prop('filePickerInitiated', false);\r\n\t\t\t$clone.find('[duck-image-value]').text('');\r\n\t\t}\r\n\r\n\t\t\r\n\t\t$clone.find('.js-card').guideCard();\r\n\t\t$item.parent().sortable('[duck-type]');\r\n\r\n\t\t$wrapper.trigger('duckArrayItemAdded', [$clone]);\r\n\t\t$wrapper.closest('[data-function*=\"scroll\"]').trigger('initScroll')\r\n\t}\r\n\r\n\tfunction removeFromObject(obj, path, value) {\r\n\t\tconst pathList = typeof path === 'string' ? path.split('.') : path;\r\n\t\tconst length = pathList.length\r\n\r\n\t\tfor(let i = 0; i < length; i++){\r\n\t\t\tconst field = pathList[i];\r\n\t\t\tconst isLastItem = length === 1;\r\n\t\t\tconst isObject = typeof obj[field] === 'object';\r\n\r\n\t\t\tif(isLastItem && !isObject){\r\n\t\t\t\tdelete obj[field];\r\n\t\t\t} else if (!isObject){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tconst type = obj[field] instanceof Array ? 'array' : 'object';\r\n\r\n\t\t\tif(type === 'object'){\r\n\t\t\t\tconst newPathList = pathList.slice(0);\r\n\t\t\t\tnewPathList.splice(0, 1);\r\n\r\n\t\t\t\tobj[field] = removeFromObject(obj[field], newPathList, value);\r\n\t\t\t} else {\r\n\t\t\t\tconst indexToSplice = isLastItem ?  obj[field].indexOf(value) : \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tobj[field].map((o) => o[pathList[i+1]]).indexOf(value);\r\n\t\t\t\t\r\n\t\t\t\tobj[field].splice(indexToSplice, 1)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn obj;\r\n\t}\r\n\r\n\tfunction parseObject(obj, $item, fieldName, buildObjectFunction) {\r\n\t\tconst key = $item.attr('duck-key');\r\n\t\tconst newObj = obj[fieldName] || {};\r\n\r\n\t\tif(key && !newObj[key]){\r\n\t\t\tnewObj[key] = $item.attr('duck-key-value') || duck.uuid();\r\n\t\t}\r\n\r\n\t\tobj[fieldName] = buildObjectFunction(newObj, duck.findRelevantChildren($item, '[duck-field]'));\r\n\t}\r\n\r\n\tfunction parseArray(obj, $item, fieldName, buildObjectFunction) {\r\n\t\tconst $objectToUpdate = duck.findRelevantChildren($item, '[duck-type=\"object\"]');\r\n\t\tconst value = $objectToUpdate.first().attr('duck-key') ? obj[fieldName] || [] : [];\r\n\r\n\t\tif($objectToUpdate.length) {\r\n\t\t\t$objectToUpdate.each((i, objec) => {\r\n\t\t\t\tconst $objec = $(objec);\r\n\t\t\t\tconst key = $objec.attr('duck-key');\r\n\t\t\t\tconst keyValue = $objec.attr('duck-key-value') || duck.uuid();\r\n\t\t\t\tconst newObj = key ? value.filter((o) => o[key] === keyValue)[0] || {} : {}\r\n\r\n\t\t\t\t// if the key is defined, the object is being altered/added without the context of the other items\r\n\t\t\t\tif(key){\r\n\t\t\t\t\t// if the key doesn't have a preset value, give it a uuid\r\n\t\t\t\t\tnewObj[key] = keyValue;\r\n\r\n\t\t\t\t\t// check to see if an item with the same key exists in the array\r\n\t\t\t\t\tconst indexOfCurrentId = value.map((o) => o[key]).indexOf(newObj[key]);\r\n\r\n\t\t\t\t\t// if it does, remove it from the list of values\r\n\t\t\t\t\tif(indexOfCurrentId !== -1){\r\n\t\t\t\t\t\tvalue.splice(indexOfCurrentId, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// add the new object to the list of values\r\n\t\t\t\tvalue.push(buildObjectFunction(newObj, duck.findRelevantChildren($objec, '[duck-field]')));\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t$item.find('[duck-value]').each((i, arrayItem) => {\r\n\t\t\t\tconst val = $(arrayItem).val();\r\n\r\n\t\t\t\tif(val){\r\n\t\t\t\t\tvalue.push(val);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif(obj[fieldName] || value.length){\r\n\t\t\tobj[fieldName] = value;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction parseCheckbox(obj, $item, fieldName) {\r\n\t\tconst value = [];\r\n\r\n\t\t$item.find('input[type=\"checkbox\"]').each((j, checkbox) => {\r\n\t\t\tconst $checkbox = $(checkbox);\r\n\r\n\t\t\tif($checkbox.prop('checked')){\r\n\t\t\t\tvalue.push($checkbox.val());\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif(obj[fieldName] || value.length){\r\n\t\t\tobj[fieldName] = value;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction parseRadio(obj, $item, fieldName) {\r\n\t\tconst value = $item.find('input[type=\"radio\"]:checked').val();\r\n\r\n\t\tif(obj[fieldName] || value){\r\n\t\t\tobj[fieldName] = value;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction parseWysiwyg(obj, $item, fieldName, editor) {\r\n\t\tconst summernote = editor || '.summernote';\r\n\t\tconst value = $item.find(summernote).summernote('code');\r\n\r\n\t\tif(value){\r\n\t\t\tobj[fieldName] = value;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction buildObject(obj, $context) {\r\n\t\t$context.each((i, item) => {\r\n\t\t\tconst $item = $(item);\r\n\t\t\tconst fieldName = $item.attr('duck-field');\r\n\t\t\tconst type = $item.attr('duck-type');\r\n\r\n\t\t\tswitch(type){\r\n\t\t\t\tcase 'object': {\r\n\t\t\t\t\tparseObject(obj, $item, fieldName, buildObject);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'array': {\r\n\t\t\t\t\tparseArray(obj, $item, fieldName, buildObject);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'checkbox': {\r\n\t\t\t\t\tparseCheckbox(obj, $item, fieldName);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'radio': {\r\n\t\t\t\t\tparseRadio(obj, $item, fieldName);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'bool': {\r\n\t\t\t\t\tobj[fieldName] = $item.prop('checked') || $item.find('input[type=\"checkbox\"]').prop('checked');\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'wysiwyg': {\r\n\t\t\t\t\tparseWysiwyg(obj, $item, fieldName);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'image':\r\n\t\t\t\tcase 'select': \r\n\t\t\t\tcase 'number': \r\n\t\t\t\tcase 'string':\r\n\t\t\t\tdefault: {\r\n\t\t\t\t\tconst isInputValue = $item.val();\r\n\t\t\t\t\tconst value = isInputValue ? isInputValue : $item.find('[duck-value]').val();\r\n\r\n\t\t\t\t\tif(obj[fieldName] || value){\r\n\t\t\t\t\t\tobj[fieldName] = value;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn obj;\r\n\t}\r\n\r\n\tfunction autoSetUrl($urlField, $urlFromField) {\r\n\t\t$urlFromField.on('input', () => {\r\n\t\t\t$urlField.val($urlFromField.val().replace(/'/g, '').replace(/[^a-zA-Z0-9]/g, '-').toLowerCase()).trigger('validate');\r\n\t\t});\r\n\t}\r\n\r\n\tfunction addItem($wrapper, table, key, keyValue, $startOfFields, successCallback, errorCallBack) {\r\n\t\tconst item = {};\r\n\t\titem[key] = keyValue || duck.uuid();\r\n\r\n\t\tconst itemToAdd = buildObject(item, $startOfFields);\r\n\r\n\t\tduck(table).add(itemToAdd, successCallback, errorCallBack);\r\n\t\t$wrapper.trigger('duck.form.submitted', [itemToAdd]);\r\n\t}\r\n\r\n\tfunction updateItem($wrapper, table, key, keyValue, $startOfFields, successCallback, errorCallBack) {\r\n\t\tduck(table).get({field: key, value: keyValue, findOne: true}, (data) => {\r\n\t\t\tconst originalPassword = table === 'Users' ? data.local && data.local.password : false; // due to how javascript references values, this has to be declared before the item is built;\r\n\t\t\tconst item = buildObject(data, $startOfFields);\r\n\r\n\t\t\t// because the password is encrypted, it will save over the old password, thinking an update was made\r\n\t\t\tif(originalPassword) {\r\n\t\t\t\tif(item.local.password === originalPassword) {\r\n\t\t\t\t\tdelete item.local.password;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tduck(table).update(item, successCallback, errorCallBack);\r\n\t\t\t$wrapper.trigger('duck.form.submitted', [item]);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction deleteItem($wrapper, table, key, keyValue) {\r\n\t\tconst item = {}\r\n\t\titem[key] = keyValue;\r\n\r\n\t\tduck(table).delete(keyValue, () => {\r\n\t\t\tconst currentLocation = window.location.href.split('/');\r\n\t\t\tconst goTo = $wrapper.attr('duck-goTo');\r\n\r\n\t\t\tif(currentLocation[currentLocation.length - 1]){\r\n\t\t\t\tcurrentLocation.pop();\r\n\t\t\t} else {\r\n\t\t\t\tcurrentLocation.pop();\r\n\t\t\t\tcurrentLocation.pop();\r\n\t\t\t}\r\n\r\n\t\t\tconst newLocation = goTo ? goTo : currentLocation.join('/');\r\n\t\t\tif(window.location.href === newLocation) {\r\n\t\t\t\twindow.location.reload(true);\r\n\t\t\t} else{\r\n\t\t\t\twindow.location.href = newLocation;\r\n\t\t\t}\r\n\t\t});\r\n\t\t$wrapper.trigger('duck.form.submitted', [item]);\r\n\t}\r\n\r\n\tfunction deleteFieldFromItem($wrapper, table, key, keyValue, successCallback, errorCallBack) {\r\n\t\tconst path = $wrapper.attr('duck-delete-path');\r\n\t\tconst value = $wrapper.attr('duck-delete-value');\r\n\r\n\t\tduck(table).get({field: key, value: keyValue, findOne: true}, (data) => {\r\n\t\t\tconst item = removeFromObject(data, path, value);\r\n\r\n\t\t\t$wrapper.trigger('duck.form.submitted', [item]);\r\n\r\n\t\t\tduck(table).update(item, successCallback, errorCallBack);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction editForm(e) {\r\n\t\tconst $wrapper = e.data.wrapper;\r\n\r\n\t\t$wrapper.attr('duck-edit-form', $wrapper.attr('duck-edit-form') === 'view' ? 'edit' : 'view');\r\n\t\t$('[data-function*=\"scroll\"]').trigger('initScroll');\r\n\t}\r\n\r\n\tfunction triggerSubmitForm(e) {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\r\n\t\te.data.wrapper.trigger('duck.form.submit');\r\n\t}\r\n\r\n\tfunction submitForm(e) {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\r\n\t\tconst crud = e.data.crud;\r\n\t\tconst table = e.data.table;\r\n\t\tconst key = e.data.key;\r\n\t\tconst keyValue = e.data.keyValue;\r\n\t\tconst $startOfFields = e.data.startOfFields;\r\n\t\tconst $wrapper = e.data.wrapper;\r\n\t\tconst successCallback = e.data.successCallback;\r\n\t\tconst errorCallBack = e.data.errorCallBack;\r\n\r\n\t\t$(e.currentTarget).prop('disabled', true);\r\n\r\n\t\tswitch(crud){\r\n\t\t\t// adds an item to the table\r\n\t\t\tcase 'add':{\r\n\t\t\t\taddItem($wrapper, table, key, keyValue, $startOfFields, successCallback, errorCallBack);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// updates an item from the table\r\n\t\t\tcase 'update':{\r\n\t\t\t\tupdateItem($wrapper, table, key, keyValue, $startOfFields, successCallback, errorCallBack);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// deletes an item from the table\r\n\t\t\tcase 'delete':{\r\n\t\t\t\tdeleteItem($wrapper, table, key, keyValue);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// deletes a field or value from an item in the table\r\n\t\t\tcase 'deleteField':{\r\n\t\t\t\tdeleteFieldFromItem(table, key, keyValue, successCallback, errorCallBack)\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault:\r\n\t\t}\r\n\t}\r\n\r\n\tfunction duckForm(wrapper, options) {\r\n\t\tconst $wrapper = $(wrapper);\r\n\t\tconst $startOfFields = duck.findRelevantChildren($wrapper, '[duck-field]');\r\n\t\tconst $editButton = $wrapper.find('[duck-button=\"edit\"]');\r\n\t\tconst $cancelButton = $wrapper.find('[duck-button=\"cancel\"]');\r\n\t\tconst table = (options && options.table) || $wrapper.attr('duck-table');\r\n\t\tconst crud = (options && options.crud) || $wrapper.attr('duck-function');\r\n\t\tconst key = (options && options.key) || $wrapper.attr('duck-key');\r\n\t\tconst keyValue = (options && options.keyValue) || $wrapper.attr('duck-key-value');\r\n\t\tconst $urlField = $wrapper.find('[duck-field=\"url\"] input');\r\n\t\tconst successCallback = (options && options.successCallback) || (() => {$wrapper.trigger('duck.form.success')});\r\n\t\tconst errorCallBack = (options && options.errorCallBack) || (() => {$wrapper.trigger('duck.form.error')});\r\n\r\n\t\tif($urlField.length){\r\n\t\t\tautoSetUrl($urlField, $wrapper.find('[duck-field=\"names\"] [duck-field=\"display\"] input'));\r\n\t\t}\r\n\r\n\t\tif(!table || !crud || !key || ((crud === 'update' || crud === 'delete') && !keyValue)) {\r\n\t\t\treturn; // need to have a table, key, and it's function set, and must have key value if it's for an update or delete\r\n\t\t}\r\n\r\n\t\t$editButton.off('click', editForm)\r\n\t\t\t\t.on('click', {wrapper: $wrapper}, editForm);\r\n\t\t$cancelButton.off('click', editForm)\r\n\t\t\t\t\t.on('click', {wrapper: $wrapper}, editForm);\r\n\r\n\t\t// set what happens when the submit button is clicked\r\n\t\t$wrapper.off('click', triggerSubmitForm)\r\n\t\t\t\t.on('click', '[duck-button=\"submit\"]', {wrapper: $wrapper}, triggerSubmitForm);\r\n\r\n\t\t$wrapper.off('duck.form.submit', submitForm).on('duck.form.submit', {crud, table, key, keyValue, wrapper: $wrapper, startOfFields: $startOfFields, successCallback, errorCallBack}, submitForm)\r\n\r\n\t\t// set arrays to be sortable\r\n\t\t$wrapper.find('[duck-type=\"array\"]')\r\n\t\t\t\t.each((i, item) => {\r\n\t\t\t\t\tconst $item = $(item);\r\n\t\t\t\t\tconst $itemChildren = duck.findRelevantChildren($item, '[duck-type]');\r\n\r\n\t\t\t\t\t$itemChildren.first().parent().sortable('[duck-type]');\r\n\t\t\t\t});\r\n\r\n\t\t// make add and delete item from array work\r\n\t\t$wrapper.find('[duck-button=\"add\"]').off('click', addArrayItem).click(addArrayItem);\r\n\t\t$wrapper.find('[duck-button=\"delete\"]').off('click', deleteArrayItem).click(deleteArrayItem);\r\n\t}\r\n\r\n\t$.fn.duckForm = function init(options) {\r\n\t\treturn this.each((index, wrapper) => {\r\n\t\t\tduckForm(wrapper, options);\r\n\t\t});\r\n\t}\r\n\r\n\t$(() => {$('[duck-table]').duckForm();});\r\n}(jQuery.noConflict(), duck, window)"]}