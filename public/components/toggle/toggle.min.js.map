{"version":3,"sources":["components/toggle/toggle.js"],"names":["$","toggleClasses","$target","classes","e","i","stopPropagation","trigger","triggerToggleEvent","toggleEventName","getElementString","$elem","elem","classList","value","replace","makeToggle","wrapper","$this","attr","split","$targets","join","off","event","on","fn","each","index","init","jQuery"],"mappings":"iBAAA,UAAAA,GAGI,QAAAC,GAAAC,EAAAC,GAGI,MAAO,UAACC,GADZA,EAASH,iBACL,KAAO,GAAAI,KAAAF,GACDG,EAAAA,YAAFH,EAAAE,GAGCH,GAAAK,QAAA,YAIR,QAAAC,GAAAN,EAAAO,GAGG,MAAO,UAACL,GADZA,EAASI,kBACLN,EAAOK,QAAOE,IAIjB,QAAAC,GAAAC,GAGG,GAAMC,GAAOD,EAAM,GADdD,EAAAA,EAATG,UAAgCC,MAAAC,QAAA,MAAA,IAE5B,OAAMZ,GAAUS,SAAhB,IAAqBC,EAAUC,GAA/B,IAAqCC,EAGxC,QAAAC,GAAAC,GAGG,GAAMC,GAAQlB,EAAEiB,GADXD,EAAWC,EAApBE,KAA6B,gBAAAD,EAAAC,KAAA,eAAAC,MAAA,OAAAF,GACnBA,EAAUD,EAAAA,KAAhB,eAAA,OAKA,KAAI,GAAMZ,KAAKgB,GAAS,CAAxB,GAAAnB,GAAemB,EAAfA,EAAwBhB,IACdH,EAAYmB,EAAShB,KAA3B,gBAAAH,EAAAiB,KAAA,eAAAC,MAAA,OAAA,UACMjB,EAAwBO,EAAbQ,GAAXf,YAAuDO,EAAqBR,GAA5EC,OAAsFA,EAA5FmB,KAAA,IAGApB,GAAQqB,IAAId,GAAZP,EAAQqB,GAARd,EAAAR,EAA8BC,EAAAC,IAGjB,UAAVqB,EAAAA,EAAAA,MAAUhB,EAAQN,EAAAO,IAArBS,EAEOO,GAAAD,EAAAhB,EAAAN,EAAAO,KAMfT,EAAE0B,GAAGV,WAAa,WAAlB,MAAKA,MAALW,KAAkB,SAAAC,EAASC,GACvBb,EAAYW,MAKhBG,OAAO,WAAA,MAAM9B,GAAE,4BAA4BgB,gBAA3Cc","file":"toggle.min.js","sourcesContent":["/*global jQuery */\r\n\r\nvoid function initializeToggle($) {\r\n    'use strict';\r\n\r\n    function toggleClasses($target, classes){\r\n        return (e) => {\r\n            e.stopPropagation();\r\n            for(const i in classes){\r\n                $target.toggleClass(classes[i])\r\n            }\r\n\r\n            $target.trigger('toggled');\r\n        }\r\n    }\r\n\r\n    function triggerToggleEvent($target, toggleEventName){\r\n        return (e) => {\r\n            e.stopPropagation();\r\n            $target.trigger(toggleEventName);\r\n        };\r\n    }\r\n\r\n    function getElementString($elem){\r\n        const elem = $elem[0]\r\n        const classes = elem.classList.value.replace(/\\s/g, '.');\r\n\r\n        return `${elem.nodeName}#${elem.id}.${classes}`\r\n    }\r\n\r\n    function makeToggle(wrapper) {\r\n        const $this = $(wrapper);\r\n        const $targets = ($this.attr('data-target') && $this.attr('data-target').split(',')) || [$this];\r\n        const event = $this.attr('data-event') || 'click';\r\n\r\n        \r\n        for(const i in $targets){\r\n            const $target = $($targets[i]);\r\n            const classes = ($target.attr('data-toggle') && $target.attr('data-toggle').split(' ')) || ['active'];\r\n            const toggleEventName = `${getElementString($this)}.toggles.${getElementString($target)}.to.${classes.join('.')}`;\r\n            \r\n            $target.off(toggleEventName); // make sure there is at most one toggle event on the target so it won't double toggle\r\n            $target.on(toggleEventName, toggleClasses($target, classes));\r\n\r\n            if(event === 'hover'){\r\n                $this.hover(triggerToggleEvent($target, toggleEventName));\r\n            } else {\r\n                $this.on(event, triggerToggleEvent($target, toggleEventName));\r\n            }\r\n        }\r\n    }\r\n\r\n    $.fn.makeToggle = function init() {\r\n        return this.each((index, wrapper) => {\r\n            makeToggle(wrapper);\r\n        });\r\n    };\r\n\r\n    jQuery(() => $('[data-function=\"toggle\"]').makeToggle());\r\n}(jQuery);"]}