{"version":3,"sources":["components/toggle/toggle.js"],"names":["$","toggleClasses","$target","classes","e","stopPropagation","length","i","trigger","triggerToggleEvent","toggleEventName","getElementString","$elem","elem","classList","value","replace","makeToggle","wrapper","$this","attr","split","targets","isSelf","indexOf","thisIndex","find","referencesSelf","substring","join","off","event","on","fn","each","index","init","noConflict"],"mappings":"iBAAA,UAAAA,GAGI,QAAAC,GAAAC,EAAAC,GAGI,MAAO,UAACC,GADZA,EAASH,iBAKD,KAAI,GAHFI,GAAAA,EAAFC,OAGQC,EAAI,EAAGA,EAAID,EAAQC,IADrBD,EAAAA,YAAiBA,EAAvBC,GAGCL,GAAAM,QAAA,YAIR,QAAAC,GAAAP,EAAAQ,GAGG,MAAO,UAACN,GADZA,EAASK,kBACLP,EAAOM,QAAOE,IAIjB,QAAAC,GAAAC,GAGG,GAAMC,GAAOD,EAAM,EAAnB,IAAAC,EAAMA,CAGF,GAAMV,GAAUU,EAAKC,UAAUC,MAAMC,QAAQ,MAAO,IAApD,OAAMb,GAAUU,SAAhB,IAAqBC,EAAUC,GAA/B,IAAqCC,EAGxC,MAAA,gBAGJ,QAAAC,GAAAC,GAMG,IAAMZ,GAHAa,GAAQnB,EAAEkB,GADXD,EAAWC,EAApBE,KAA6B,gBAAAD,EAAAC,KAAA,eAAAC,MAAA,OAAA,QACnBF,EAAUD,EAAAA,KAAhB,eAAA,QACMI,EAAWH,EAAMC,OAEjBd,EAAAA,EAASgB,EAAAA,EAAff,IAAA,CAGI,GAAMgB,GAAyB,UAAfD,EAAQf,IAAiC,SAAfe,EAAQf,GAD9CA,EAAWD,EAASC,GAAIiB,QAAA,QACtBD,GAAUA,IAA0B,IAA1BE,GAAhB,IAAyDA,GAAzD,MAAAH,EAAAf,GAAA,IACMkB,EAAYH,EAAAH,EACMI,EAAWE,EAAcC,KAAMD,EAAAA,GAAAA,UAAmBH,IAAQf,EAARe,EAAkBf,IACtFL,EAAUqB,EAASJ,KAAT,eACQQ,EAAuBD,KAAKJ,eAAWM,MAAU,MAAQN,UAC3EnB,EAAuBQ,EAAiBT,GAAxCC,YAAqDQ,EAAqBT,GAA1EC,OAAiFA,EAAvF0B,KAAA,IAGA3B,GAAQ4B,IAAIpB,GAAZR,EAAQ4B,GAARpB,EAAAT,EAA8BC,EAAAC,IAGjB,UAAV4B,EAAAA,EAAAA,MAAUtB,EAAQP,EAAAQ,IAArBS,EAEOa,GAAAD,EAAAtB,EAAAP,EAAAQ,KAMfV,EAAEiC,GAAGhB,WAAa,WAAlB,MAAKA,MAALiB,KAAkB,SAAAC,EAASC,GACvBnB,EAAYiB,MAKhBlC,EAAE,WAAA,MAAMA,GAAE,6BAA6BiB,gBAAvCjB,OAAEqC","file":"toggle.min.js","sourcesContent":["/*global jQuery */\r\n\r\nvoid function initializeToggle($) {\r\n    'use strict';\r\n\r\n    function toggleClasses($target, classes){\r\n        return (e) => {\r\n            e.stopPropagation();\r\n\r\n            const length = classes.length\r\n            for(let i = 0; i < length; i++ ){\r\n                $target.toggleClass(classes[i])\r\n            }\r\n\r\n            $target.trigger('toggled');\r\n        }\r\n    }\r\n\r\n    function triggerToggleEvent($target, toggleEventName){\r\n        return (e) => {\r\n            e.stopPropagation();\r\n            $target.trigger(toggleEventName);\r\n        };\r\n    }\r\n\r\n    function getElementString($elem){\r\n        const elem = $elem[0]\r\n\r\n        if(elem){\r\n            const classes = elem.classList.value.replace(/\\s/g, '.');\r\n\r\n            return `${elem.nodeName}#${elem.id}.${classes}`\r\n        }\r\n\r\n        return 'NoTargetFound'\r\n    }\r\n\r\n    function makeToggle(wrapper) {\r\n        const $this = $(wrapper);\r\n        const targets = ($this.attr('data-target') && $this.attr('data-target').split(',')) || ['this'];\r\n        const event = $this.attr('data-event') || 'click';\r\n        const length = targets.length;\r\n\r\n        for(let i = 0; i < length ; i++){\r\n            const isSelf = (targets[i] === ' this' || targets[i] === 'this');\r\n            const thisIndex = targets[i].indexOf('this');\r\n            const referencesSelf = !isSelf && (thisIndex === 0 || (thisIndex === 1 && targets[i][0] === ' '));\r\n            const $target = isSelf ? $this : \r\n                                    referencesSelf ? $this.find(targets[i].substring(5)) : $(targets[i]);\r\n            const classes = $target.attr('data-toggle') ? $target.attr('data-toggle').split(' ') : ['active'];\r\n            const toggleEventName = `${getElementString($this)}.toggles.${getElementString($target)}.to.${classes.join('.')}`;\r\n            \r\n            $target.off(toggleEventName); // make sure there is at most one toggle event on the target so it won't double toggle\r\n            $target.on(toggleEventName, toggleClasses($target, classes));\r\n\r\n            if(event === 'hover'){\r\n                $this.hover(triggerToggleEvent($target, toggleEventName));\r\n            } else {\r\n                $this.on(event, triggerToggleEvent($target, toggleEventName));\r\n            }\r\n        }\r\n    }\r\n\r\n    $.fn.makeToggle = function init() {\r\n        return this.each((index, wrapper) => {\r\n            makeToggle(wrapper);\r\n        });\r\n    };\r\n\r\n    $(() => $('[data-function*=\"toggle\"]').makeToggle());\r\n}(jQuery.noConflict());"]}