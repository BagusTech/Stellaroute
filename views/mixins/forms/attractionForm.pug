-var attractionFormId = 0

mixin attractionForm(crud, attraction, locations, cancel)
	.p-Sm(id=`AttractionForm${attractionFormId}`, duck-table='Attractions', duck-function= crud, duck-key='Id', duck-key-value= attraction && attraction.Id)
		div(duck-field='names', duck-type='object')
			.w-50--sm.pr-Sm.f-L--sm(duck-field='display', duck-type='string')
				.form-group
					label Display Name
						input.form-control(type='text', required, duck-value, value= attraction && attraction.names.display)
			.w-50--sm.pl-Sm.f-L--sm(duck-field='official', duck-type='string')
				.form-group
					label Official Name
						input.form-control(type='text', required, duck-value, value= attraction && attraction.names.official)
			.c-B(duck-field='alias', duck-type='array')
				label Alias'
				for alias in attraction && attraction.names && attraction.names.alias ? attraction.names.alias : [null]
					.form-group(duck-type='string')
						input.form-control(type='text', required, duck-value, value= alias)

		if (!attraction)
			.form-group(duck-field='url', duck-type='string')
					label Url
						input.form-control(type='text', required, duck-value, disabled)

		.form-group.p-md.bg-G__ltr(duck-field='category', duck-type='checkbox')
			h3.mt-0 Category
			.row
				for category in attractionCategories
					.col-xs-12.col-sm-6.col-md-4.col-sm-3
						.checkbox
							label
								input(type='checkbox', value= category, checked= attraction && attraction.category && attraction.category.indexOf(category) > -1)
								= category
		
		.form-group(duck-field='price', duck-type='wysiwyg')
			label Price
			.summernote!= attraction && attraction.price

		.form-group(duck-field='hours', duck-type='wysiwyg')
			label Hours
			.summernote!= attraction && attraction.hours

		.form-group(duck-field='address', duck-type='wysiwyg')
			label Address
			.summernote!= attraction && attraction.address
		
		.form-group(duck-field='tagline', duck-type='string')
			label Tagline
				input.form-control(type='text', duck-value, value= attraction && attraction.tagline)

		div(duck-field='description', duck-type='wysiwyg')
			label Description
			.summernote!= attraction && attraction.description

		.form-group(duck-field='cardImage', duck-type='string')
			label Card Image
				input.form-control(type='text', required, duck-value, value= attraction && attraction.cardImage)

		div(duck-field='images', duck-type='array')
			h3 Images
			div
				for image in attraction && attraction.images ? attraction.images : [null]
					.form-group.d-F.fai-C(duck-type='string', data-icon='fa fa-arrows-v')
						input.ml-Sm.form-control(type='string', duck-value, value= image)
						button.btn.btn-danger(duck-button='delete') Delete Image
			.ta-R
				button.btn.btn-primary(duck-button='add') Add Image

		div(duck-field='needToKnow', duck-type='array')
			h3 Need To Know
			for advice in attraction && attraction.needToKnow ? attraction.needToKnow : [{}]
				.row(duck-type='object')
					h4 Advice
					div
						.form-group.col-xs-10(duck-field='title', duck-type='string')
							label Title
								input.form-control(type='text', duck-value, value= advice.title)
						.form-group.col-xs-12(duck-field='description', duck-type='wysiwyg')
							label Description
							.summernote!= advice.description
						.ta-C
							button.btn.btn-danger.mt-NegLg(duck-button='delete') Delete Advice
			.ta-R
				button.btn.btn-primary(duck-button='add') Add Advice

		div(duck-field='quickFacts', duck-type='array')
			h3 Quick Facts
			for advice in attraction && attraction.quickFacts ? attraction.quickFacts : [{}]
				.row(duck-type='object')
					h4 Fact
					div
						.form-group.col-xs-10(duck-field='title', duck-type='string')
							label Title
								input.form-control(type='text', duck-value, value= advice.title)
						.form-group.col-xs-12(duck-field='description', duck-type='wysiwyg')
							label Description
							.summernote!= advice.description
						.ta-C
							button.btn.btn-danger.mt-NegLg(duck-button='delete') Delete Fact
			.ta-R
				button.btn.btn-primary(duck-button='add') Add Fact

		div(duck-field='orientation', duck-type='object')
			h3 Orientation
			.form-group(duck-field='description', duck-type='wysiwyg')
				label Description
				.summernote!= attraction && attraction.orientation && attraction.orientation.description
			.form-group(duck-field='map', duck-type='string')
				label Map
					input.form-control(type='text', duck-value, value= attraction && attraction.orientation && attraction.orientation.map)
			.form-group(duck-field='gettingThere', duck-type='wysiwyg')
				label Getting There
				.summernote!= attraction && attraction.orientation && attraction.orientation.gettingThere

		div(duck-field='nearbyAttractions', duck-type='array')
			label Nearby Attractions
			div
				for nearbyAttraction in attraction && attraction.nearbyAttractions ? attraction.nearbyAttractions : [null]
					if (nearbyAttractions)
						div= nearbyAttractions.filter((i) => i.Id === nearbyAttraction)[0].names.display
					.form-group.d-F.fai-C(duck-type='string', data-icon='fa fa-arrows-v')
						input.ml-Sm.form-control(type='text', duck-value, value= nearbyAttraction)
						button.btn.btn-danger(duck-button='delete')
			.ta-R
				button.btn.btn-primary(duck-button='add') Add Nearby Attraction

		div(duck-field='subAttractions', duck-type='array')
			label Sub Attractions
			div
				for subAttraction in attraction && attraction.subAttractions ? attraction.subAttractions : [null]
					if (subAttractions)
						div= subAttractions.filter((i) => i.Id === subAttraction)[0].names.display
					.form-group.d-F.fai-C(duck-type='string', data-icon='fa fa-arrows-v')
						input.ml-Sm.form-control(type='text', duck-value, value= subAttraction)
						button.btn.btn-danger(duck-button='delete')
			.ta-R
				button.btn.btn-primary(duck-button='add') Add Sub Attraction

		.form-group(duck-field='parentAttraction', duck-type='string')
			label Parent Attraction
				input.form-control(type='text', duck-value, value= attraction && attraction.parentAttraction)

		if locations && locations.continent
			.form-group.hidden(duck-field='continent', duck-type='array')
				for continent in locations.continent
					input(type='text', required, duck-value, value=continent, disabled)
		else if attraction && attraction.continent
			.form-group.hidden(duck-field='continent', duck-type='array')
				for continent in attraction.continent
					input(type='text', required, duck-value, value=continent, disabled)

		if locations && locations.worldRegions
			.form-group.hidden(duck-field='worldRegions', duck-type='array')
				for worldRegions in locations.worldRegions
					input(type='text', required, duck-value, value=worldRegions, disabled)
		else if attraction && attraction.worldRegions
			.form-group.hidden(duck-field='worldRegions', duck-type='array')
				for worldRegions in attraction.worldRegions
					input(type='text', required, duck-value, value=worldRegions, disabled)

		if locations && locations.country
			.form-group.hidden(duck-field='country', duck-type='array')
				for country in locations.country
					input(type='text', required, duck-value, value=country, disabled)
		else if attraction && attraction.country
			.form-group.hidden(duck-field='country', duck-type='array')
				for country in attraction.country
					input(type='text', required, duck-value, value=country, disabled)
		
		if locations && locations.countryRegions
			.form-group.hidden(duck-field='countryRegions', duck-type='array')
				for countryRegions in locations.countryRegions
					input(type='text', required, duck-value, value=countryRegions, disabled)
		else if attraction && attraction.countryRegions
			.form-group.hidden(duck-field='countryRegions', duck-type='array')
				for countryRegions in attraction.countryRegions
					input(type='text', required, duck-value, value=countryRegions, disabled)

		if locations && locations.province
			.form-group.hidden(duck-field='province', duck-type='array')
				for province in locations.province
					input(type='text', required, duck-value, value=province, disabled)
		else if attraction && attraction.province
			.form-group.hidden(duck-field='province', duck-type='array')
				for province in attraction.province
					input(type='text', required, duck-value, value=province, disabled)

		if locations && locations.provinceRegions
			.form-group.hidden(duck-field='provinceRegions', duck-type='array')
				for provinceRegions in locations.provinceRegions
					input(type='text', required, duck-value, value=provinceRegions, disabled)
		else if attraction && attraction.provinceRegions
			.form-group.hidden(duck-field='provinceRegions', duck-type='array')
				for provinceRegions in attraction.provinceRegions
					input(type='text', required, duck-value, value=provinceRegions, disabled)

		if locations && locations.city
			.form-group.hidden(duck-field='city', duck-type='array')
				for city in locations.city
					input(type='text', required, duck-value, value=city, disabled)
		else if attraction && attraction.city
			.form-group.hidden(duck-field='city', duck-type='array')
				for city in attraction.city
					input(type='text', required, duck-value, value=city, disabled)

		if locations && locations.cityRegions
			.form-group.hidden(duck-field='cityRegions', duck-type='array')
				for cityRegions in locations.cityRegions
					input(type='text', required, duck-value, value=cityRegions, disabled)
		else if attraction && attraction.cityRegions
			.form-group.hidden(duck-field='cityRegions', duck-type='array')
				for cityRegions in attraction.cityRegions
					input(type='text', required, duck-value, value=cityRegions, disabled)

		if locations && locations.neighborhoods
			.form-group.hidden(duck-field='neighborhoods', duck-type='array')
				for neighborhoods in locations.neighborhoods
					input(type='text', required, duck-value, value=neighborhoods, disabled)
		else if attraction && attraction.neighborhoods
			.form-group.hidden(duck-field='neighborhoods', duck-type='array')
				for neighborhoods in attraction.neighborhoods
					input(type='text', required, duck-value, value=neighborhoods, disabled)

		.ta-R
			if attraction
				+deleteForm('Attractions', attraction.Id)(class='mr-Xs')

			button.btn.btn-primary(type='button', duck-button='submit')= attraction ? 'Update' : 'Add'
			!= cancel

	- attractionFormId++